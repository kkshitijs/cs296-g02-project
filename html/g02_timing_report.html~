<!DOCTYPE html>
<html>
<head>
<title> Profiling Report </title>
<style type="text/css">
body {color:black; font-family:arial; font-size:18px; background-color:lavender}
</style></head>
<body leftmargin="0.5in" topmargin="1in" >
<h1><center><b><u> <b>Sliding Gate: A CS296 Group 02 Report </b></u></b></center></h1>
<div style="position:absolute; left:25.0%; align:center;">Kshitij Singh<br></div>
<div style="position:absolute; left:50.0%; align:center;">Prithviraj Madhukar Billa<br></div>
<div style="position:absolute; left:75.0%; align:center;">Sahil Jindal<br></div>
<br>
<div style="position:absolute; left:25.0%;">110050016<br></div>
<div style="position:absolute; left:50.0%;">110050065<br></div>
<div style="position:absolute; left:75.0%;">110020043<br></div>
<br>
<div style="position:absolute; left:25.0%;">kkshitijs@cse.iitb.ac.in<br></div>
<div style="position:absolute; left:50.0%;">prithvirajbilla@cse.iitb.ac.in<br></div>
<div style="position:absolute; left:75.0%;">sahil@cse.iitb.ac.in<br></div>
<br>
<br>
<center><SCRIPT>document.write(Date())</SCRIPT></center>
<h1><u><center> Introduction </center></u></h1>
 We have designed a machine that goes through a sequence of processes to end up performing a simple task - ``Sliding a Gate". A pendulum starts off by toppling dominos that roll a ball on a pulley that enables a see-saw to throw a ball on unstable dominos that goes through a sequence of see-saws and hinges that ends up sliding a gate. Of course, you may ask why not just slide the gate? But that is just what a Rube Goldberg Machine is. As per Wikipedia, <br><br><i>
 A Rube Goldberg machine is a deliberately over-engineered or overdone machine that performs a very simple task in a very complex fashion, usually including a chain reaction. </i>
<h1><u><center> Origin </center></u></h1>
 It all started way back in January 2013 when we had to first think of a design to implement as a course project. We were naive back then and thought of making a complicated machine. A sequence of processes will lead to a final goal, which we set as ``Putting Out A Fire". The initially proposed design looked like this. <center>
<figure><img src="../doc/RubeGoldberg.png" width="600" height="400"></figure> <em>Original Proposed Design of Rube Goldberg </em></center>
 We saw a couple of videos on <em>YouTube</em> regarding usage of Box2D and also glanced across the Box2D Manual to understand what could be done in this environment. Of course, as we later found out, there were a few changes that had to be made in our initial design to be able to adapt it seamlessly to Box2D GUI. This lead to revisions and evolutions in the design, which we talk of in the next section. <h1><u><center> The Present State </center></u></h1>
 Currently, our design looks slightly different. A snapshot of the initial state is given below. <center>
<figure><img src="../doc/state_00.png" width="600" height="400"></figure> <em>State of Machine before Start </em></center>
 You would have noticed that the word <em>slightly</em> is quite apt, since the design is still a derivative of the original one. Our machine includes the following elements: <ul>
<li> Pendulum </li>
<ul>
<li> It knocks off dominos to start the simulation </li>
</ul>
<li> Dominos system </li>
<ul>
<li> It topples onto a ball to set it rolling </li>
</ul>
<li> A balanced pulley system </li>
<ul>
<li> It triggers a see-saw motion when unbalanced </li>
</ul>
<li> See-Saw </li>
<ul>
<li> It drops a ball on a rotating platform </li>
</ul>
<li> Rotating Platform </li>
<ul>
<li> It works as a gear substitute to give direction to the dropped ball </li>
</ul>
<li> Unstable Dominos </li>
<ul>
<li> It is a shaky system that when triggered, sparks off two simultaneous processes </li>
</ul>
<li> Linked See-Saws </li>
<ul>
<li> One see-saw triggers another, which leads finally to a ball falling down </li>
</ul>
<li> Hinged Bars and Balls </li>
<ul>
<li> This works as a self-triggering system that finally leads to a ball speeding along the ground </li>
</ul>
<li> Pulley-Gate System </li>
<ul>
<li> Here, the application of weight on the pulley leads to the raising of a gate </li>
</ul>
<li> Sliding-Gate </li>
<ul>
<li> The final item that leads to a gate sliding along its frame </li>
</ul>
</ul>
 I know that sounded a bit woozy. For a graphical understanding of how our machine works, refer to the section <b>A Thousand Words </b>for stage-wise simulation snapshots. Now that you understand what constitutes the design, let us see what really makes this appealing to the observer. <h1><u><center> Unique is Interesting </center></u></h1>
 Unique things are quite interesting, aren't they? Well, here is some interesting(and, I daresay, <em>unique</em> stuff about our design. <ul>
<li> The <b><em>Linked See-Saw </b></em>system is a nice element in the design. Here the imbalance of one see-saw leads to imbalance of a neighbouring see-saw which happens till 4 steps finally leading to a ball rolling off. This is quite elegant and is definitely one of the high-points of the simulation. </li>
<li> Another one is the <b><em>Hinged Bars and Balls </b></em>system which, thanks to the manipulation of densities of the bar and the ball, leads the observer to the illusion that energy is being created. The balls suddenly seem to pick up speed. Obviously, no external force is given at this stage and it is a sight to behold. Also, it helps us later since the speed is needed to slide the gate. </li>
<li> The <b><em>Shaky Dominos </b></em>is a nice concept since it allows us to break a sequential process into two sequential processes that happen simultaneously. The dominos have been arranged such that one of them falls to the left leading to some processes, while the other one falls to the right simultaneously triggering the linked see-saws. </li>
<li> We prefer the <b><em>Sliding Gate </b></em>personally. That has been created by putting a rectangular body among frames, and then connecting it through a <em>Distance Joint </em>with a <em>denser</em> body kept below on the ground. The movement of that body leads to the final sliding of the gate. </li>
</ul>
 The machine required some fine-tuning. That involves routine stuff like positioning elements correctly and triggering them at the right time. But there are a few points that we would like to bring to the notice. <h2> The Gear Hack </h2><hr>
 This was done to substitute the gear that was proposed in the original design. The gear was basically needed just to change the direction of the rolling ball. It seemed cumbersome to add the gear as earlier proposed in its image form. Rather, we decided to compromise on the visual appeal and instead have ended up with a bar hinged at its center. At the start a vertical bar falls on this bar to set it rotating. When a ball falls on this now rotating bar, its direction is changed to where we want it to go. This is the same functionality that was required of the gear, and works just fine for our purposes. Also, it kind of looks cool! <h2> Air Pump Vanishes </h2><hr>
 We had considered making an air pump, which would propel a ball in front of it when a load would fall on it. This was another instance of our incomplete knowledge of Box2D at the time of making the design, since we did not know that objects can't change their shape. Also, it was easier to just use the gear hack mentioned above to propel the ball in the required direction.  <h2> Fire Runs Cold </h2><hr>
 As noted earlier, our objective was to put out a fire. While it did seem interesting at the time, it soon started to seem a stupid objective. Over time, this final objective underwent many changes. Initially, two images were needed - those of a pail of water and a raging fire. This basically involved falling of a body on another and then changing the images to supposedly `put out a fire'. Currently, the end goal is a more logical and reasonable one - sliding a gate. And, seriously, this looks way better than what we initially had in mind. <h1><u><center> Timing Analysis </center></u></h1>
 Timing analysis is a key part of any project. It is a good indicator of the efficiency of the written code. So, here we have generated  different plots using <em>Matplotlib</em> and present an analysis based on them. <h2> Results from the graphs generated </h2><hr>
<ul>
<li> As the number of iterations increase , the average step time, average times for collisions, position and velocity updates all decrease. This is due to the fact when the number of iterations increase , some variables will not be re-computed in subsequent iterations. </li>
<center><img src="../plots/g02_project_plot01.png" width=48% height=40%></center>
<li> As the number of iterations increase , the loop time also increases (first linearly upto about 30 iterations and then at a less than linear rate). This is so since it includes the time for collision resolution, position and velocity updates which decrease on incrementing the number of iteratios. </li>
<center><img src="../plots/g02_project_plot00.png" width=400px height=400px></center>
<li> All times remain nearly same for different rerun values.This is very logical since just running the code again with same inputs should give similar times. </li>
<left><img src="../plots/g02_project_plot02.png" width=48% height=40% background-color:transparent></left>
<right><img src="../plots/g02_project_plot03.png" width=48% height=40% background-color:transparent></right>
<br>
<li> Graph 5 plots the histogram of frequency of different step time values for 16 iterations. There is no clear pattern but when there is heavy load, a bell shaped histogram is obtained. </li>
<center><img src="../plots/g02_project_plot05.png" width=400px height=400px></center>
</ul>
<h1><u><center> Profiling using the Release-version </center></u></h1>
 The profiling was done here following these steps : <ul>
<li> We built the Box2D library in the <em>Release</em> version, using cmake <em>-DCMAKE\_BUILD\_TYPE=Release ../ </em></li>
<li> The code was run for 2,00,000 iterations to generate the profile data. </li>
<li> The optimisation flags <em>-O3</em> were used before compiling and linking. </li>
</ul>
<h2> Analyzing Flat-Profile </h2><hr>
 The Release version itself includes optimizations in its build process. Plus, we have also included the optimisation flag <em>-O3</em> in the compiling and linking process. This leads to highly efficient code. There is a listing of <em>75</em> functions, of which the most intensive are $\approx 4-5$ only. <center>
<figure><img src="../doc/profile_data.png" width="900" height="300"></figure> <em>Flat Profile Data for Release-version profiling </em></center>
 The following conclusions can be drawn from the flat profile data : <ul>
<li> Total time taken by the functions : <em>263.66 seconds </em></li>
<li> Most intensive functions : </li>
<ul>
<li> <em>b2ContactSolver::SolveVelocityConstraints()</em> </li>
<li> <em>b2ContactSolver::SolvePositionConstraints()</em> </li>
<li> <em>b2ContactSolver::InitializeVelocityConstraints()</em> </li>
</ul>
<li> Time taken by most intensive functions : </li>
<ul>
<li> <em>b2ContactSolver::SolveVelocityConstraints()</em> : <em>195.49 seconds </em></li>
<li> <em>b2ContactSolver::SolvePositionConstraints()</em> : <em>29.63 seconds </em></li>
<li> <em>b2ContactSolver::InitializeVelocityConstraints()</em> : <em>10.55 seconds </em></li>
</ul>
<li> Total time taken by the functions in our simulation is much greater than the time which was obtained by profiling the base code in lab 7. This is a result of greater number of elements in our simulation. As a result, velocities and positions are updated more frequently and it is these functions only which take the maximum amount of time in the simulation. </li>
</ul>
 Also, when we had run the base code in debug version in lab 7, we had realized that overloaded operators were being called millions of times , generating large overheads. Constructor for b2Vec2 was also called large number of times which could be optimized by declaring the object outside a loop and not initializing it in every iteration of the loop. But since we are running in Release mode and using the optimization flags, these things have been taken care of. <h2> Analyzing Call-Graph </h2><hr>
 The call graph for the Release-version profiling is totally horizontal, indicating that the child functions have been placed <em>inline</em> This turns out to be quite an efficient implementation, since it removes all the interconnections between the different functions, and leads to a highly structured and layered function call pattern. <center>
<figure><img src="../doc/call_graph.png" width="900" height="125"></figure> <em>Cropped Call Graph for Release-version profiling </em></center>
<center>-*-*-*-*-</center>
</body>
</html>
